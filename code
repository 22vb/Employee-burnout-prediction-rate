import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report
from google.colab import files

def load_and_preprocess_data():
    # Upload the file
    uploaded = files.upload()
   
    # Extract the file path
    for file_name in uploaded.keys():
        file_path = file_name

    # Load the dataset
    data = pd.read_csv("/content/Glassdoor Dataset.csv")

    # Data cleaning and preprocessing
    # Remove the index column if present
    if 'Unnamed: 0' in data.columns:
        data = data.drop(columns=['Unnamed: 0'])

    # Handle missing values
    data = data.dropna(subset=['company_names', 'industry', 'location'])

    # Function to convert review values
    def convert_review(value):
        if 'T' in value:
            return float(value.replace('T', '')) * 1000
        elif 'L' in value:
            return float(value.replace('L', '')) * 100000
        else:
            return float(value)

    # Apply the function to the 'review' column
    data['review'] = data['review'].apply(convert_review)

    # Convert other columns to appropriate data types
    data['salaries'] = pd.to_numeric(data['salaries'], errors='coerce')
    data['jobs'] = pd.to_numeric(data['jobs'], errors='coerce')

    # Impute or drop NaN values in numerical columns
    data['salaries'].fillna(data['salaries'].median(), inplace=True)
    data['jobs'].fillna(data['jobs'].median(), inplace=True)

    # Feature selection
    features = data[['rating_new', 'employer_size', 'industry', 'review', 'salaries', 'jobs']]

    # One-hot encode categorical features
    encoder = OneHotEncoder(sparse_output=False, drop='first')
    encoded_features = encoder.fit_transform(features[['employer_size', 'industry']])
    encoded_feature_names = encoder.get_feature_names_out(['employer_size', 'industry'])
    encoded_df = pd.DataFrame(encoded_features, columns=encoded_feature_names)

    # Combine encoded features with the rest of the features
    features = features.drop(columns=['employer_size', 'industry'])
    features = pd.concat([features.reset_index(drop=True), encoded_df], axis=1)

    # Create the target variable (binary label for burnout potential)
    data['burnout'] = np.where((data['rating_new'] < 3.5) & (data['review'] > 1000), 1, 0)
    target = data['burnout']

    return features, target

def main():
    # Load and preprocess the data
    features, target = load_and_preprocess_data()

    # Split the data into training and testing sets
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

    # Standardize the features for SVM
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    # Initialize the models
    models = {
        "Logistic Regression": LogisticRegression(),
        "Random Forest": RandomForestClassifier(),
        "Support Vector Machine": SVC()
    }

    # Train and evaluate each model
    for name, model in models.items():
        if name == "Support Vector Machine":
            model.fit(X_train_scaled, y_train)
            y_pred = model.predict(X_test_scaled)
        else:
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

        print(f"Model: {name}")
        print("Accuracy:", accuracy_score(y_test, y_pred))
        print("Classification Report:\n", classification_report(y_test, y_pred))
        print("-" * 50)

if __name__ == "__main__":
    main()
